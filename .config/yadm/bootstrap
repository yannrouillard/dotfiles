#!/bin/bash

# Safety measures
set -o errexit  # Leave immediately if a command returns an error
set -o nounset  # Leave immediately if an unitialized value is used
set -o pipefail # Leave immediately if a command fails in a pipe

#####################################################################
# Helper functions
#####################################################################

function brew_pkg() {
    local package="$1"
    brew ls --versions "${package}" >/dev/null || brew install "${package}"
}

function brew_cask_pkg() {
    local package="$1"
    brew cask ls --versions "${package}" >/dev/null || brew cask install "${package}"
}

function mas_pkg() {
    local package="$1"
    local package_id
    package_id=$(mas search "${package}" | grep " ${package} (" | awk '{ print $1 }' || true)
    [[ -n "${package_id}" ]] || return 1

    mas list | grep "^ ${package_id} " >/dev/null || mas install "${package_id}"
}

function is_git_folder() {
    [[ -d "${target_folder}" ]] || return 1
    (cd "${target_folder}" && git rev-parse --git-dir 2>/dev/null) || return 1
}

function git_source() {
    local git_url="$1" target_folder="$2"
    ! is_git_folder || return 0
    mkdir -p "${target_folder}"
    git clone "${git_url}" "${target_folder}"
}

function user_shell() {
    local requested_shell="$1"
    local current_user_shell

    current_user_shell=$(sudo dscl . -read "/Users/${USER}" UserShell | awk '{ print $2 }')

    [[ "${requested_shell}" != "${current_user_shell}" ]] || return 0
    sudo dscl . -create "/Users/${USER}" UserShell "${requested_shell}"
}

function bundle_cli_env() {
    git_source "https://github.com/zdharma/zplugin.git" ~/.zplugin/bin
    brew_pkg coreutils
    brew_pkg findutils
    brew_pkg zsh
    brew_pkg bash
    brew_pkg ripgrep
    brew_pkg ncdu
    brew_pkg bat
    brew_pkg fd
    brew_pkg exa
    brew_pkg fzf
    brew_pkg vim
    brew_pkg jq
    brew_pkg z

    user_shell "/usr/local/bin/zsh"
}

function bundle_mac_desktop() {
    defaults write com.apple.dock autohide -bool true
    defaults write com.apple.dock tilesize 39
    defaults write com.apple.dock persistent-apps -array '()'

    brew_cask_pkg iterm2
    mkdir -p "$HOME/.iterm2"
    defaults write com.googlecode.iterm2 PrefsCustomFolder "$HOME/.iterm2"
    defaults write com.googlecode.iterm2.plist LoadPrefsFromCustomFolder -bool true

    brew_cask_pkg google-chrome
    brew_cask_pkg firefox

    defaults write com.apple.AppleMultitouchTrackpad Clicking -bool true
    defaults write com.apple.AppleMultitouchTrackpad showAppExposeGestureEnabled -bool true
    defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad -bool true
    brew_cask_pkg numi
    brew_cask_pkg font-fira-code
    brew_cask_pkg spotify
    brew_cask_pkg tor-browser
    brew_cask_pkg dropbox
    brew_cask_pkg whatsapp
    brew_cask_pkg adobe-acrobat-reader
    brew_cask_pkg gimp
    brew_cask_pkg alfred
    brew_cask_pkg bettertouchtool
    brew_cask_pkg vlc
    brew tap homebrew/cask-fonts
    brew_cask_pkg font-hack-nerd-font
    brew_cask_pkg transmission
    brew_cask_pkg protonvpn

    brew_pkg mas

    mas_pkg "Be Focused Pro - Focus Timer"
    mas_pkg "Elmedia:universal video player"
    mas_pkg "Wunderlist: To-Do List & Tasks"

    brew tap d12frosted/emacs-plus
    brew_pkg emacs-plus

    brew_cask_pkg wondershare-filmora
    brew_cask_pkg calibre
    brew_cask_pkg send-to-kindle
}

function bundle_achilles() {
    brew_cask_pkg 1password7
    brew_cask_pkg pritunl
    brew_pkg awscli
    brew_pkg vault
    brew_pkg terraform tflint
    brew_pkg python@2
    pip install dogpush
    mask_pkg "Microsoft Remote Desktop 10"
    brew tap mongodb/brew
    brew_pkg mongodb-community@4.2
}

function bundle_devel_common() {
    brew_pkg diff-so-fancy
    brew_cask_pkg visual-studio-code
    code --install-extension shan.code-settings-sync
    defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false

    brew_cask_pkg docker
}

function bundle_devel_python() {
    brew_pkg python
    brew_pkg pipenv
}

function bundle_devel_node() {
    brew_pkg node
}

function bundle_devel_shell() {
    brew_pkg shellcheck
}

function bundle_android() {
    brew_cask_pkg android-platform-tools
}

function bundle_hacker() {
    brew_cask_pkg wireshask
    brew_pkg spoof-mac
}

#####################################################################
# Main code
#####################################################################

available_targets=("cli_env" "mac_desktop" "devel_common")

[[ -z "$*" ]] || available_targets=("$@")

for target in "${available_targets[@]}"; do
    eval "bundle_${target}"
done
